Written by Artur Tarassow (please ask questions and report bugs on the gretl
mailing list if possible).

Source code and test script(s) can be found here:
https://github.com/atecon/stack

User-defined alternative to gretl's built-in stack() function. The built-in
function currently does not work within a loop-block and within a function-block as the active data set cannot be extended by additional observations in these cases.
The stack_data() package, however, does not support all the interesting functionalities of the built-in stack() function.
This package does the following:
Suppose one has two series, x1 and x2, for each T observations. The public function stack_data() compiles a data set that starts with a block for x1 with T rows followed by a block with the same structure for x2. Hence, the resulting series is a vertical concatenation of x1 and x2.

The sample script illustrates how the written stacked data set can be assembled into a panel via stack_data() plus gretl's built-in "join" command.


stack_data(L, filename, series_name, series_description):
--------------
Vertically stack data of L into a single series and store the resulting series. The stored data set includes three series: (1) "unit_id" is an identifier referring to the i-th stacked series, (2) "obs_id" is a unit-specific running number from 1 to T identifier, and (3) the stacked series itself.

Arguments:
List 			- list, List of series to stack
filename		- string, Full path plus filename where to store data set
series_name		- string, Name of compiled series (optional, default:
			"stacked_series")
series_description	- string, Set the variable's descriptive label (optional,
			default: "")

Return:
If the stacked data set is succesfully stored, return 0, 1 otherwise.


Changelog:
- v0.9, March 2020:
    + initial release
