function matrix stack_matdata (const list L "List of series to stack",
                            const string series_name[null] "Name of constructed series")
    /* Vertically stack data of 'L' into a single series and return stacked data as matrix.
    return: Empty matrix in case of an error, otherwise matrix including stacked data. */

    if !exists(series_name)
        string series_name = "stacked_series"
    endif
    if !exists(series_description)
        string series_description = ""
    endif

    list R = stackjob(L, series_name, series_description)

    return {R}
end function


function scalar stack_data (const list L "List of series to stack",
                            const string filename "Full path + filename of new dataset",
                            const string series_name[null] "Name of constructed series",
                            const string series_description[null] "Description")
    /* Vertically stack data of L into a single series and
       store the resulting series.
    return: 0 if extended dataset is succesfully stored; 1 otherwise. */

    if !exists(series_name)
        string series_name = "stacked_series"
    endif
    if !exists(series_description)
        string series_description = ""
    endif
    if isvalid_filename(filename) == FALSE
        return TRUE
    endif

    scalar err_code = stackjob(L, series_name, series_description, filename)

    return err_code
end function


function scalar stackjob (const list L "List of series to stack",
                        const string series_name "Name of constructed series",
                        const string series_description "Description",
                        const string filename[null])
    /* Main job going on in the background. To the stacking, add data to the temporary data set and return list of stacked series plus some ID series.
    Return: In case of an error, return an empty list, otherwise non-empty list with stacked data. */


    if has_min_two_members(L) == FALSE
        return {}
    endif

    setobs 1 1 --cross-section 		# reset eventual index
    scalar T = $nobs
    scalar n_L = nelem(L) - 1
    scalar add_T = T * n_L

    # NAs will not be dropped when converting from series to vector
    set skip_missing off
    matrix data_vector = vec({L})
    set skip_missing on

    catch dataset addobs add_T
    if $error
        printf "\nError: Failed to add new observations.\n"
        return {}
    endif

    series @series_name = get_target_series(data_vector, series_name, series_description)
    series unit_id = get_unit_id_series(L)
    series obs_id = get_obs_id_series(L)

    list X = unit_id obs_id @series_name

    if exists(filename)
        scalar err_code = store_stacked_series(X, filename)
    endif

    return {X}
end function


function series get_target_series (const matrix data_vector,
                                   const string series_name,
                                   const string series_description)
    /* Convert vector to series and add a series description. */

    genseries(series_name, data_vector)
    setinfo @series_name --description="@series_description"

    return @series_name
end function


function series get_obs_id_series (const list L)
/* Construct a running number from 1 to T where each
    entry refers to the i-th observation of a unit. */

    scalar k = nelem(L)
    scalar T = $nobs / k			# length of each vector
    series id = vec(seq(1,T)' .* ones(k)')
    setinfo id --description="Time dimension"

    return id
end function


function series get_unit_id_series (const list L)
/* Construct index indicating to which input series an observation
    belongs to. */

    scalar k = nelem(L)
    scalar T = $nobs / k			# length of each vector
    series id = vec(ones(T,k) .* seq(1,k))
    setinfo id --description="Unit dimension"

    return id
end function


function scalar store_stacked_series (const list L "ID and stacked series",
                                      const string filename)
    /* Store dataset with stacked series. */

    if nelem(L) == 0
        printf "\nError: Nothing to store as list is empty."
        return TRUE
    endif

    catch store "@filename" L
    scalar err_code = $error
    if err_code
        printf "\nError: %s\n", errmsg(err_code)
        return TRUE
    endif

    return 0
end function


function scalar has_min_two_members (const list L)
    /* Check that 'L' has at least two members.
    Return: TRUE if L has at least two members, otherwise FALSE. */

    if nelem(L) < 2
        printf "\nError: Input list needs at least two members.\n"
        return FALSE
    endif

    return TRUE
end function

function scalar isvalid_filename (const string f)
    /* Check that 'f' is a non-empty string.
    Return: TRUE if it is valid, otherwise FALSE. */

    if strlen(f) == 0
        printf "\nError: Invalid filename '%s'.\n", f
        return FALSE
    endif

    return TRUE
end function
