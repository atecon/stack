<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="stack_data" minver="2019b" lives-in-subdir="true">
<author email="atecon@posteo.de">Artur Tarassow</author>
<version>0.9</version>
<date>2020-04-17</date>
<description>Stack list of series</description>
<tags>C81</tags>
<help>
Please ask questions and report bugs on the gretl mailing list if possible.

Source code and test script(s) can be found here:
https://github.com/atecon/stack

Since gretl 2020b, the built-in stack() function has got new cool features, namely the &quot;offset&quot; and &quot;n&quot; parameters (see for details: http://gretl.sourceforge.net/gretl-help/funcref.html#stack).

The stack_data() function proposed here, however, may still be helpfull for some applications. First, it can be applied within both a loop-block and a function-block, respectively. While the built-in stack() function can be applied in a loop-block since gretl version 2020b, it is not applicable within a function-block as the dimension of the data set cannot be changed by a some statement within a function-block.

The stack_data() does its operation not in-memory but rather stores the stacked data set in a separate data file. It simply stacks k series (each of length T) vertically, and adds the two identifier series: (1) 'unit_id' (unique integer identifying each of the k series) and (2) 'obs_id' (running number refering to each of T observations). Both, 'unit_id' and 'obs_id' may be helpful in case the user wants to define the stacked data as a panel data set, and/ or join another data set by means of gretl's built-in 'join' command.


stack_data(L, filename, series_name, series_description):
--------------
Vertically stack data of list L into a single series and store the resulting series. The stored data set includes three series: (1) &quot;unit_id&quot; is an identifier referring to the i-th stacked series, (2) &quot;obs_id&quot; is a unit-specific running number from 1 to T identifier, and (3) the stacked series itself.

Arguments:
List 			- list, List of series to stack
filename		- string, Full path plus filename where to store data set
series_name		- string, Name of compiled series (optional, default: &quot;stacked_series&quot;)
series_description	- string, Set the variable's descriptive label (optional, default: &quot;&quot;)

Return:
If the stacked data set is succesfully stored, return 0, 1 otherwise.


Changelog:
- v0.9, April 2020:
    + initial release
</help>
<data-files count="1">
international_gdp.gdt </data-files>
<gretl-function name="stack_data" type="scalar">
 <params count="4">
  <param name="L" type="list" const="true">
<description>List of series to stack</description>
  </param>
  <param name="filename" type="string" const="true">
<description>Full path + filename of new dataset</description>
  </param>
  <param name="series_name" type="string" optional="true" const="true">
<description>Name of constructed series</description>
  </param>
  <param name="series_description" type="string" optional="true" const="true">
<description>Description</description>
  </param>
 </params>
<code>/* Vertically stack data of L into a single series and
store the resulting series.
return: 0 if extended dataset is succesfully stored; 1 otherwise. */
if nelem(L) &lt; 2
  printf &quot;\nError: Input list needs at least two members.\n&quot;
  return 1
endif
if strlen(filename) == 0
  printf &quot;\nError: Invalid filename.\n&quot;
  return 1
endif
if !exists(series_name)
  string series_name = &quot;stacked_series&quot;
endif
if !exists(series_description)
  string series_description = &quot;&quot;
endif
setobs 1 1 --cross-section 		# reset eventual index
scalar T = $nobs
scalar n_L = nelem(L) - 1
scalar add_T = T * n_L
set skip_missing off			# NAs will not be dropped when converting from series to vector
matrix data_vector = vec({L})
set skip_missing on
catch dataset addobs add_T
if $error
  printf &quot;\nError: Failed to add new observations.\n&quot;
  return 1
endif
series @series_name = get_target_series(data_vector, series_name, series_description)
series unit_id = get_unit_id_series(L)
series obs_id = get_obs_id_series(L)
list FINAL = unit_id obs_id @series_name
scalar err_code = store_stacked_series(FINAL, filename)
return err_code
</code>
</gretl-function>
<gretl-function name="get_target_series" type="series" private="1">
 <params count="3">
  <param name="data_vector" type="matrix" const="true"/>
  <param name="series_name" type="string" const="true"/>
  <param name="series_description" type="string" const="true"/>
 </params>
<code>/* Convert vector to series and add a series description. */
genseries(series_name, data_vector)
setinfo @series_name --description=&quot;@series_description&quot;
return @series_name
</code>
</gretl-function>
<gretl-function name="get_obs_id_series" type="series" private="1">
 <params count="1">
  <param name="L" type="list" const="true"/>
 </params>
<code>/* Construct a running number from 1 to T where each
entry refers to the i-th observation of a unit. */
scalar k = nelem(L)
scalar T = $nobs / k			# length of each vector
series id = vec(seq(1,T)' .* ones(k)')
setinfo id --description=&quot;Time dimension&quot;
return id
</code>
</gretl-function>
<gretl-function name="get_unit_id_series" type="series" private="1">
 <params count="1">
  <param name="L" type="list" const="true"/>
 </params>
<code>/* Construct index indicating to which input series an observation
belongs to. */
scalar k = nelem(L)
scalar T = $nobs / k			# length of each vector
series id = vec(ones(T,k) .* seq(1,k))
setinfo id --description=&quot;Unit dimension&quot;
return id
</code>
</gretl-function>
<gretl-function name="store_stacked_series" type="scalar" private="1">
 <params count="2">
  <param name="L" type="list" const="true">
<description>ID and stacked series</description>
  </param>
  <param name="filename" type="string" const="true"/>
 </params>
<code>/* Store dataset with stacked series. */
catch store &quot;@filename&quot; L
scalar err_code = $error
if err_code
  printf &quot;\nError: %s\n&quot;, errmsg(err_code)
  return 1
endif
return 0
</code>
</gretl-function>
<sample-script>
set verbose off
clear

include stack_data.gfn
open international_gdp.gdt --frompkg=stack_data --quiet

# Store stacked data
list to_be_stacked = dataset
string filename = &quot;stacked_series.gdt&quot;
stack_data(to_be_stacked, filename, &quot;gdp&quot;, &quot;gdp for AU AT BE CA CH&quot;)

# Open stacked data and set a panel
open &quot;@filename&quot; -p -q
series country_name = unit_id
stringify(country_name, defarray(&quot;AU&quot;, &quot;AT&quot;, &quot;BE&quot;, &quot;CA&quot;))		# attache country name string

setobs unit_id obs_id --panel-vars
print unit_id country_name obs_id gdp -o


# Note: You may easily join another data set using the keys 'unit_id' and 'obs_id'
# EXAMPLE: &lt;join somne_data.gdt --ikey=unit_id,obs_id --okey=some_unit_key,some_obs_key&gt;
</sample-script>
</gretl-function-package>
</gretl-functions>
