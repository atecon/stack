function list replace_missings (const list L,
                                const scalar key_value "identifier for missing values")
    /* Replace missing values to make sure dimension
    are correctly catched when casting list to matrix. */

    list R = null
    strings names = varnames(L)
    loop foreach i L -q
        R += genseries(names[i], (missing(L.$i)==1 ? key_value : L.$i))
    endloop
    
    return R
end function 


function scalar stack_data (const list L "List of series to stack",
                            const string filename "Full path + filename of new dataset")
/* Stack data into a single vector.
    return: 0 if extended dataset is succesfully stored; 1 otherwise. */

    if nelem(L) < 2
        printf "\nError: Input list needs at least two members.\n"
        return 1
    endif
    if strlen(filename) == 0
        printf "\nError: Invalid filename.\n"
        return 1
    endif

    setobs 1 1 --cross-section 		# reset eventual index
    scalar T = $nobs
    scalar n_L = nelem(L) - 1
    scalar add_T = T * n_L
    scalar key_value = $huge		# Flag missings by this value    

    list R = replace_missings(L, key_value)  
    matrix data_vector = vec({R})

    catch dataset addobs add_T
    if $error
        printf "\nError: Failed to add new observations.\n"
        return 1
    endif

    series stacked_series = data_vector
    series stacked_series = stacked_series == key_value ? NA : stacked_series
    series id = get_id_series(L)
    
    list FINAL = id stacked_series
    scalar err_code = store_stacked_series(FINAL, filename)

    return err_code
end function


function series get_id_series (const list L)
    /* Construct index indicating to which input series an observation
    belongs to. */

    scalar k = nelem(L)
    scalar T = $nobs / k			# length of each vector
    series id = vec(ones(T,k) .* seq(1,k))

    return id
end function 


function scalar store_stacked_series (const list L "ID and stacked series",
                                      const string filename)
    /* Store dataset with stacked series. */

    catch store "@filename" L
    scalar err_code = $error
    if err_code
        printf "\nError: %s\n", errmsg(err_code)
        return 1
    endif

    return 0
end function                                        
