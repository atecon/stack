function list replace_missings (const list L,
                                const scalar key_value "identifier for missing values")
    /* Replace missing values to make sure dimension
    are correctly catched when casting list to matrix. */

    list R = null
    strings names = varnames(L)
    loop foreach i L -q
        R += genseries(names[i], (missing(L.$i)==1 ? key_value : L.$i))
    endloop
    
    return R
end function 


function scalar stack_data (const list L "List of series to stack",
                            const string filename "Full path + filename of new dataset",
                            const string series_name[null] "Name of constructed series",
                            const string series_description[null] "Description")
    /* Vertically stack data of L into a single series and
    store the resulting series.
    return: 0 if extended dataset is succesfully stored; 1 otherwise. */

    if nelem(L) < 2
        printf "\nError: Input list needs at least two members.\n"
        return 1
    endif
    if strlen(filename) == 0
        printf "\nError: Invalid filename.\n"
        return 1
    endif
    if !exists(series_name)
        string series_name = "stacked_series"
    endif
    if !exists(series_description)
        string series_description = ""
    endif

    setobs 1 1 --cross-section 		# reset eventual index
    scalar T = $nobs
    scalar n_L = nelem(L) - 1
    scalar add_T = T * n_L
    scalar key_value = $huge		# Flag missings by this value

    list R = replace_missings(L, key_value)
    matrix data_vector = vec({R})

    catch dataset addobs add_T
    if $error
        printf "\nError: Failed to add new observations.\n"
        return 1
    endif

    series @series_name = data_vector
    series @series_name = @series_name == key_value ? NA : @series_name
    setinfo @series_name --description="@series_description"
    series unit_id = get_unit_id_series(L)
    series obs_id = get_obs_id_series(L)
    setinfo unit_id --description="Unit dimension"    
    setinfo obs_id --description="Time dimension"
    
    list FINAL = unit_id obs_id @series_name
    scalar err_code = store_stacked_series(FINAL, filename)

    return err_code
end function


function series get_obs_id_series (const list L)
    /* Construct a running number from 1 to T where each
    entry refers to the i-th observation of a unit. */

    scalar k = nelem(L)
    scalar T = $nobs / k			# length of each vector
    series id = vec(seq(1,T)' .* ones(k)')

    return id
end function 


function series get_unit_id_series (const list L)
    /* Construct index indicating to which input series an observation
    belongs to. */

    scalar k = nelem(L)
    scalar T = $nobs / k			# length of each vector
    series id = vec(ones(T,k) .* seq(1,k))

    return id
end function 


function scalar store_stacked_series (const list L "ID and stacked series",
                                      const string filename)
    /* Store dataset with stacked series. */

    catch store "@filename" L
    scalar err_code = $error
    if err_code
        printf "\nError: %s\n", errmsg(err_code)
        return 1
    endif

    return 0
end function                                        
