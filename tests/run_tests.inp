set verbose off
clear


include "./src/stack_data.inp" --force
include assertion.gfn

open denmark.gdt -q -p
list L = LRM LRY IBO

function void test_get_unit_id_series (const list L)
    print "Start testing get_unit_id_series()"

    scalar T = $nobs
    scalar k = nelem(L)
    scalar T_add = T * (k-1)
    dataset addobs T_add

    series id = get_unit_id_series(L)
    assert_equal_num(nobs(id), T*k)

    print "Finished testing get_unit_id_series()"
end function
test_get_unit_id_series(L)


function void test_get_obs_id_series (const list L)
    print "Start testing get_obs_id_series()"

    scalar T = $nobs
    scalar k = nelem(L)
    scalar T_add = T * (k-1)
    dataset addobs T_add

    series id = get_obs_id_series(L)
    assert_equal_num(nobs(id), T*k)
    assert_equal_num(id[1], 1)
    assert_equal_num(id[2], 2)
    assert_equal_num(id[T], T)

    print "Finished testing get_obs_id_series()"
end function
test_get_obs_id_series(L)

function void test_stack_data (const list L)
    print "Start testing stack_data()"

    list EMPTY = null
    scalar err_code = stack_data(EMPTY, "foo")
    assert_true(err_code)

    list SINGLE = null
    scalar err_code = stack_data(SINGLE, "foo")
    assert_true(err_code)

    scalar err_code = stack_data(L, "")
    assert_true(err_code)

    string filename = "foo.gdt"
    series a = L[1]
    series b = L[2]
    series c = L[3]
    a[1] = NA
    b[10] = NA
    list IN = a b c
    scalar err_code = stack_data(IN, filename, "some_cool_series", "some fancy description")
    assert_false(err_code)

    print "Finished testing stack_data()"
end function
test_stack_data(L)
scalar T = $nobs
scalar k = nelem(L)
open "foo.gdt" -q -p
assert_true(exists("some_cool_series"))
assert_equal_num($nobs, T*k)
assert_true(missing(some_cool_series[1]))
assert_true(missing(some_cool_series[T+10]))
print "All tests passed for stack_data()"


printf "\nInfo: All tests passed.\n"
