set verbose off
clear

#include "./src/stack.inp" --force

include string_utils.gfn
include assertion.gfn
include extra.gfn


open denmark.gdt -q -p
list L = LRM LRY
function void test_replace_missings (const list L)
    print "Start testing replace_missings()"

    scalar key_value = $huge
    series a = L[1]
    series b = L[2]
    a[1] = NA
    a[55] = NA
    b[10] = NA
    list IN = a b

    list OUT = replace_missings(IN, key_value)
    assert_equal_num(nelem(OUT), 2)
    assert_equal_num(OUT[1][1], $huge)
    assert_equal_num(OUT[1][55], $huge)
    assert_equal_num(OUT[1][2], a[2])

    assert_equal_num(OUT[2][10], $huge)
    assert_equal_num(OUT[2][1], b[1])

    print "Finished testing replace_missings()"
end function
test_replace_missings(L)


open denmark.gdt -q -p
list L = LRM LRY IBO
function void test_stack_data (const list L)
    print "Start testing stack_data()"

    string filename = "foo.gdt"
    series a = L[1]
    series b = L[2]
    series c = L[3]
    a[1] = NA
    b[10] = NA
    list IN = a b c
    scalar err_code = stack_data(IN, filename)
    assert_false(err_code) 
    
    print "All tests passed for stack_data()"
end function
test_stack_data(L)
open "foo.gdt" -q -p
assert_equal_num($nobs, 110)


stop




open denmark.gdt -q -p
list L = LRM LRY
function void test_replace_missings (list L)
    print "Start testing replace_missings()"
    
    series a = L[1]
    series b = L[2]
    a[1] = NA
    b[10] = NA
    list L = a b
    scalar key_value = NA
    list R = replace_missings(L, &key_value)

    assert_equal_num(nelem(R), nelem(L))
    assert_false(sum(missing(R[1])))
    assert_false(sum(missing(R[2])))
    assert_equal_num(a[1], key_value)
    assert_equal_num(b[10], key_value)
    assert_not_equal_num(a[2], key_value)
    assert_not_equal_num(b[2], key_value)
    
    print "All tests passed for replace_missings()"
end function
test_replace_missings(L)


printf "\nInfo: All tests passed.\n"
